-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_matmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_offset : IN STD_LOGIC_VECTOR (63 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_matmul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal row_1_fu_165_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_1_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_175_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_354 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_183_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_15_reg_359 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_fu_186_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_16_reg_364 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_1_fu_199_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_9_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_reg_380 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outrowidx_fu_234_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal outrowidx_reg_385 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_324_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal inneridx_reg_390 : STD_LOGIC_VECTOR (11 downto 0);
    signal k_1_fu_251_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal B_addr_reg_403 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_279_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp1_reg_408 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_1_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_416 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_addr_1_reg_426 : STD_LOGIC_VECTOR (11 downto 0);
    signal B_load_1_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_load_reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal C_load_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal row_reg_97 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_108 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_119 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_reg_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_141 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal sum_cast_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_319_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_17_fu_171_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal col_cast5_fu_189_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_fu_205_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_19_fu_230_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_20_fu_242_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum1_fu_257_p2 : STD_LOGIC_VECTOR (11 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum1_fu_257_p2 : signal is "no";
    signal tmp_21_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_271_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast2_fu_288_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum4_fu_304_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast3_fu_284_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum2_fu_314_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal inneridx_fu_324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component check_best_model_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component check_best_model_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component check_best_model_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;



begin
    check_best_model_cud_U6 : component check_best_model_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => C_load_reg_446,
        din1 => tmp_4_reg_441,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p2);

    check_best_model_dEe_U7 : component check_best_model_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => B_load_1_reg_431,
        din1 => B_load_reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    check_best_model_eOg_U8 : component check_best_model_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 12,
        dout_WIDTH => 12)
    port map (
        din0 => tmp_15_reg_359,
        din1 => inneridx_fu_324_p1,
        dout => inneridx_fu_324_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col_reg_108 <= ap_const_lv7_0;
            elsif (((exitcond3_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_reg_108 <= col_1_fu_199_p2;
            end if; 
        end if;
    end process;

    i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_119 <= i_9_reg_380;
            elsif (((exitcond4_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_119 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_reg_141 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                j_reg_141 <= j_1_reg_416;
            end if; 
        end if;
    end process;

    k_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                k_reg_130 <= k_1_reg_398;
            elsif (((exitcond2_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_reg_130 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_reg_97 <= row_1_reg_349;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_97 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_246_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                B_addr_reg_403 <= sum1_cast_fu_262_p1(11 - 1 downto 0);
                tmp1_reg_408 <= tmp1_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                B_load_1_reg_431 <= A_q0;
                B_load_reg_436 <= A_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                C_addr_1_reg_426 <= sum2_cast_fu_319_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                C_load_reg_446 <= C_q0;
                tmp_4_reg_441 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_9_reg_380 <= i_9_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_219_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                inneridx_reg_390 <= inneridx_fu_324_p2;
                    outrowidx_reg_385(12 downto 6) <= outrowidx_fu_234_p3(12 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_1_reg_416 <= j_1_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_1_reg_398 <= k_1_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_1_reg_349 <= row_1_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_15_reg_359 <= tmp_15_fu_183_p1;
                tmp_16_reg_364 <= tmp_16_fu_186_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                tmp_6_reg_451 <= grp_fu_152_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_reg_354(12 downto 6) <= tmp_fu_175_p3(12 downto 6);
            end if;
        end if;
    end process;
    tmp_reg_354(5 downto 0) <= "000000";
    outrowidx_reg_385(5 downto 0) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_160_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_219_p2, ap_CS_fsm_state5, exitcond1_fu_246_p2, ap_CS_fsm_state6, exitcond_fu_292_p2, exitcond3_fu_193_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond1_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((exitcond_fu_292_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= B_addr_reg_403;
    A_address1 <= sum4_cast_fu_309_p1(11 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, C_addr_1_reg_426, ap_CS_fsm_state17, sum_cast_fu_210_p1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            C_address0 <= C_addr_1_reg_426;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= sum_cast_fu_210_p1(12 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state3, tmp_6_reg_451, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            C_d0 <= tmp_6_reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_193_p2, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((exitcond3_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_219_p2)
    begin
        if ((((exitcond2_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_219_p2)
    begin
        if (((exitcond2_fu_219_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_199_p2 <= std_logic_vector(unsigned(col_reg_108) + unsigned(ap_const_lv7_1));
    col_cast5_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_108),13));
    exitcond1_fu_246_p2 <= "1" when (k_reg_130 = innerdim) else "0";
    exitcond2_fu_219_p2 <= "1" when (i_reg_119 = outrows) else "0";
    exitcond3_fu_193_p2 <= "1" when (col_reg_108 = ap_const_lv7_40) else "0";
    exitcond4_fu_160_p2 <= "1" when (row_reg_97 = outrows) else "0";
    exitcond_fu_292_p2 <= "1" when (j_reg_141 = ap_const_lv7_40) else "0";
    i_9_fu_224_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_119));
    inneridx_fu_324_p1 <= i_reg_119(12 - 1 downto 0);
    j_1_fu_298_p2 <= std_logic_vector(unsigned(j_reg_141) + unsigned(ap_const_lv7_1));
    j_cast2_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_141),12));
    j_cast3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_141),13));
    k_1_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(k_reg_130));
    outrowidx_fu_234_p3 <= (tmp_19_fu_230_p1 & ap_const_lv6_0);
    row_1_fu_165_p2 <= std_logic_vector(unsigned(row_reg_97) + unsigned(ap_const_lv64_1));
    sum1_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_257_p2),64));
    sum1_fu_257_p2 <= std_logic_vector(signed(inneridx_reg_390) + signed(tmp_20_fu_242_p1));
    sum2_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_314_p2),64));
    sum2_fu_314_p2 <= std_logic_vector(unsigned(j_cast3_fu_284_p1) + unsigned(outrowidx_reg_385));
    sum4_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum4_fu_304_p2),64));
    sum4_fu_304_p2 <= std_logic_vector(unsigned(tmp1_reg_408) + unsigned(j_cast2_fu_288_p1));
    sum_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_205_p2),64));
    sum_fu_205_p2 <= std_logic_vector(unsigned(col_cast5_fu_189_p1) + unsigned(tmp_reg_354));
    tmp1_fu_279_p2 <= std_logic_vector(unsigned(tmp_16_reg_364) + unsigned(tmp_2_fu_271_p3));
    tmp_15_fu_183_p1 <= innerdim(12 - 1 downto 0);
    tmp_16_fu_186_p1 <= B_offset(12 - 1 downto 0);
    tmp_17_fu_171_p1 <= row_reg_97(7 - 1 downto 0);
    tmp_19_fu_230_p1 <= i_reg_119(7 - 1 downto 0);
    tmp_20_fu_242_p1 <= k_reg_130(12 - 1 downto 0);
    tmp_21_fu_267_p1 <= k_reg_130(6 - 1 downto 0);
    tmp_2_fu_271_p3 <= (tmp_21_fu_267_p1 & ap_const_lv6_0);
    tmp_fu_175_p3 <= (tmp_17_fu_171_p1 & ap_const_lv6_0);
end behav;
