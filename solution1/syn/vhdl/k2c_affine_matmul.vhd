-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_affine_matmul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    d_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    d_ce0 : OUT STD_LOGIC;
    d_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    outrows : IN STD_LOGIC_VECTOR (63 downto 0);
    outcols : IN STD_LOGIC_VECTOR (7 downto 0);
    innerdim : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of k2c_affine_matmul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (23 downto 0) := "000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (23 downto 0) := "000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (23 downto 0) := "000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (23 downto 0) := "000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (23 downto 0) := "000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (23 downto 0) := "000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (23 downto 0) := "000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (23 downto 0) := "000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (23 downto 0) := "000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (23 downto 0) := "001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (23 downto 0) := "010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (23 downto 0) := "100000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_195 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal outcols_cast8_fu_200_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal outcols_cast8_reg_384 : STD_LOGIC_VECTOR (12 downto 0);
    signal row_2_fu_213_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_2_reg_393 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_350_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_reg_398 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond4_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal innerdim_cast_fu_219_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal innerdim_cast_reg_403 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_222_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_408 : STD_LOGIC_VECTOR (11 downto 0);
    signal col_2_fu_238_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_19_fu_263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_19_reg_424 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outrowidx_fu_355_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal outrowidx_reg_429 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond2_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_360_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal inneridx_reg_434 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_cast4_fu_269_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_cast4_reg_439 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_cast2_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_cast2_reg_444 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_7_fu_290_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_7_reg_452 : STD_LOGIC_VECTOR (6 downto 0);
    signal C_addr_2_reg_457 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_319_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal k_2_reg_465 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_335_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_reg_475 : STD_LOGIC_VECTOR (11 downto 0);
    signal A_load_reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal B_load_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_load_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_reg_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond3_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_127 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_138 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_149 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal k_reg_160 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal phi_mul_reg_171 : STD_LOGIC_VECTOR (11 downto 0);
    signal sum_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum8_cast_fu_345_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal col_cast_fu_229_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_cast5_fu_225_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum_fu_244_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of sum_fu_244_p2 : signal is "no";
    signal j_cast_fu_281_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_cast3_fu_273_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum2_fu_296_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of sum2_fu_296_p2 : signal is "no";
    signal k_cast_fu_310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal k_cast1_fu_306_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sum5_fu_325_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 of sum5_fu_325_p2 : signal is "no";
    signal sum8_fu_340_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_350_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_350_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal outrowidx_fu_355_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_254_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal inneridx_fu_360_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (23 downto 0);

    component check_best_model_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component check_best_model_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component check_best_model_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    check_best_model_cud_U37 : component check_best_model_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_190,
        din1 => grp_fu_182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    check_best_model_dEe_U38 : component check_best_model_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => A_load_reg_490,
        din1 => B_load_reg_495,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    check_best_model_kbM_U39 : component check_best_model_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_fu_350_p0,
        din1 => tmp_fu_350_p1,
        dout => tmp_fu_350_p2);

    check_best_model_kbM_U40 : component check_best_model_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => outrowidx_fu_355_p0,
        din1 => tmp_29_fu_254_p1,
        dout => outrowidx_fu_355_p2);

    check_best_model_kbM_U41 : component check_best_model_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => inneridx_fu_360_p0,
        din1 => tmp_29_fu_254_p1,
        dout => inneridx_fu_360_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_0))) then 
                col_reg_127 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_233_p2 = ap_const_lv1_0))) then 
                col_reg_127 <= col_2_fu_238_p2;
            end if; 
        end if;
    end process;

    i_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_285_p2 = ap_const_lv1_1))) then 
                i_reg_138 <= i_19_reg_424;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1))) then 
                i_reg_138 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                j_reg_149 <= j_7_reg_452;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_258_p2 = ap_const_lv1_0))) then 
                j_reg_149 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    k_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_285_p2 = ap_const_lv1_0))) then 
                k_reg_160 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                k_reg_160 <= k_2_reg_465;
            end if; 
        end if;
    end process;

    phi_mul_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_285_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_171 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                phi_mul_reg_171 <= next_mul_reg_475;
            end if; 
        end if;
    end process;

    row_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_233_p2 = ap_const_lv1_1))) then 
                row_reg_116 <= row_2_reg_393;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_reg_116 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                A_load_reg_490 <= A_q0;
                B_load_reg_495 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_285_p2 = ap_const_lv1_0))) then
                C_addr_2_reg_457 <= sum2_cast_fu_301_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                d_load_reg_505 <= d_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_19_reg_424 <= i_19_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1))) then
                    innerdim_cast_reg_403(7 downto 0) <= innerdim_cast_fu_219_p1(7 downto 0);
                    tmp_4_reg_408(7 downto 0) <= tmp_4_fu_222_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_258_p2 = ap_const_lv1_0))) then
                inneridx_reg_434 <= inneridx_fu_360_p2;
                outrowidx_reg_429 <= outrowidx_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                j_7_reg_452 <= j_7_fu_290_p2;
                    j_cast2_reg_444(6 downto 0) <= j_cast2_fu_277_p1(6 downto 0);
                    j_cast4_reg_439(6 downto 0) <= j_cast4_fu_269_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                k_2_reg_465 <= k_2_fu_319_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_314_p2 = ap_const_lv1_0))) then
                next_mul_reg_475 <= next_mul_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    outcols_cast8_reg_384(7 downto 0) <= outcols_cast8_fu_200_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_190 <= C_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_195 <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_2_reg_393 <= row_2_fu_213_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_5_reg_500 <= grp_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_0))) then
                tmp_reg_398 <= tmp_fu_350_p2;
            end if;
        end if;
    end process;
    outcols_cast8_reg_384(12 downto 8) <= "00000";
    innerdim_cast_reg_403(12 downto 8) <= "00000";
    tmp_4_reg_408(11 downto 8) <= "0000";
    j_cast4_reg_439(11 downto 7) <= "00000";
    j_cast2_reg_444(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_208_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond2_fu_258_p2, ap_CS_fsm_state5, exitcond1_fu_285_p2, ap_CS_fsm_state6, exitcond_fu_314_p2, exitcond3_fu_233_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond4_fu_208_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_233_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_258_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_314_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= sum5_cast_fu_330_p1(12 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= sum8_cast_fu_345_p1(12 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, C_addr_2_reg_457, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state17, sum_cast_fu_249_p1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            C_address0 <= C_addr_2_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= sum_cast_fu_249_p1(12 - 1 downto 0);
        else 
            C_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state24, ap_CS_fsm_state17, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(reg_195, ap_CS_fsm_state3, ap_CS_fsm_state24, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            C_d0 <= reg_195;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= ap_const_lv32_0;
        else 
            C_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_233_p2, ap_CS_fsm_state24, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond3_fu_233_p2 = ap_const_lv1_0)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond2_fu_258_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_258_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond2_fu_258_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond2_fu_258_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_2_fu_238_p2 <= std_logic_vector(unsigned(col_reg_127) + unsigned(ap_const_lv7_1));
    col_cast5_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_127),13));
    col_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_reg_127),8));
    d_address0 <= j_cast2_reg_444(12 - 1 downto 0);

    d_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_ce0 <= ap_const_logic_1;
        else 
            d_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_285_p2 <= "1" when (j_cast_fu_281_p1 = outcols) else "0";
    exitcond2_fu_258_p2 <= "1" when (i_reg_138 = outrows) else "0";
    exitcond3_fu_233_p2 <= "1" when (col_cast_fu_229_p1 = outcols) else "0";
    exitcond4_fu_208_p2 <= "1" when (row_reg_116 = outrows) else "0";
    exitcond_fu_314_p2 <= "1" when (k_cast_fu_310_p1 = innerdim) else "0";

    grp_fu_182_p1_assign_proc : process(tmp_5_reg_500, d_load_reg_505, ap_CS_fsm_state12, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_182_p1 <= d_load_reg_505;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_182_p1 <= tmp_5_reg_500;
        else 
            grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_19_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_138));
    innerdim_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(innerdim),13));
    inneridx_fu_360_p0 <= innerdim_cast_reg_403(8 - 1 downto 0);
    j_7_fu_290_p2 <= std_logic_vector(unsigned(j_reg_149) + unsigned(ap_const_lv7_1));
    j_cast2_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_149),64));
    j_cast3_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_149),13));
    j_cast4_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_149),12));
    j_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_149),8));
    k_2_fu_319_p2 <= std_logic_vector(unsigned(k_reg_160) + unsigned(ap_const_lv7_1));
    k_cast1_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_160),13));
    k_cast_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_160),8));
    next_mul_fu_335_p2 <= std_logic_vector(unsigned(phi_mul_reg_171) + unsigned(tmp_4_reg_408));
    outcols_cast8_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outcols),13));
    outrowidx_fu_355_p0 <= outcols_cast8_reg_384(8 - 1 downto 0);
    row_2_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(row_reg_116));
    sum2_cast_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_296_p2),64));
    sum2_fu_296_p2 <= std_logic_vector(unsigned(j_cast3_fu_273_p1) + unsigned(outrowidx_reg_429));
    sum5_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum5_fu_325_p2),64));
    sum5_fu_325_p2 <= std_logic_vector(signed(inneridx_reg_434) + signed(k_cast1_fu_306_p1));
    sum8_cast_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_340_p2),64));
    sum8_fu_340_p2 <= std_logic_vector(unsigned(j_cast4_reg_439) + unsigned(phi_mul_reg_171));
    sum_cast_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_244_p2),64));
    sum_fu_244_p2 <= std_logic_vector(unsigned(col_cast5_fu_225_p1) + unsigned(tmp_reg_398));
    tmp_29_fu_254_p1 <= i_reg_138(13 - 1 downto 0);
    tmp_4_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outcols),12));
    tmp_fu_350_p0 <= outcols_cast8_reg_384(8 - 1 downto 0);
    tmp_fu_350_p1 <= row_reg_116(13 - 1 downto 0);
end behav;
