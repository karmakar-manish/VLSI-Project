// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _k2c_relu_func_HH_
#define _k2c_relu_func_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "check_best_model_lbW.h"

namespace ap_rtl {

struct k2c_relu_func : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<12> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_out< sc_logic > x_we0;
    sc_out< sc_lv<32> > x_d0;
    sc_in< sc_lv<32> > x_q0;
    sc_in< sc_lv<8> > size;
    sc_signal< sc_lv<32> > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    k2c_relu_func(sc_module_name name);
    SC_HAS_PROCESS(k2c_relu_func);

    ~k2c_relu_func();

    sc_trace_file* mVcdFile;

    check_best_model_lbW<1,1,32,32,1>* check_best_model_lbW_U50;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<7> > i_8_fu_80_p2;
    sc_signal< sc_lv<7> > i_8_reg_135;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<12> > x_addr_reg_140;
    sc_signal< sc_lv<1> > exitcond_fu_75_p2;
    sc_signal< sc_lv<32> > x_load_reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > i_reg_50;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > i_cast1_fu_66_p1;
    sc_signal< sc_lv<1> > tmp_3_fu_121_p2;
    sc_signal< sc_lv<8> > i_cast_fu_71_p1;
    sc_signal< sc_lv<32> > x_load_to_int_fu_86_p1;
    sc_signal< sc_lv<8> > tmp_fu_89_p4;
    sc_signal< sc_lv<23> > tmp_14_fu_99_p1;
    sc_signal< sc_lv<1> > notrhs_fu_109_p2;
    sc_signal< sc_lv<1> > notlhs_fu_103_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_115_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_61_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_75_p2();
    void thread_i_8_fu_80_p2();
    void thread_i_cast1_fu_66_p1();
    void thread_i_cast_fu_71_p1();
    void thread_notlhs_fu_103_p2();
    void thread_notrhs_fu_109_p2();
    void thread_tmp_14_fu_99_p1();
    void thread_tmp_3_fu_121_p2();
    void thread_tmp_fu_89_p4();
    void thread_tmp_s_fu_115_p2();
    void thread_x_address0();
    void thread_x_ce0();
    void thread_x_d0();
    void thread_x_load_to_int_fu_86_p1();
    void thread_x_we0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
