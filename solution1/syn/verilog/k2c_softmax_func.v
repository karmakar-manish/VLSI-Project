// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_softmax_func (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_q0
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_state10 = 51'd512;
parameter    ap_ST_fsm_state11 = 51'd1024;
parameter    ap_ST_fsm_state12 = 51'd2048;
parameter    ap_ST_fsm_state13 = 51'd4096;
parameter    ap_ST_fsm_state14 = 51'd8192;
parameter    ap_ST_fsm_state15 = 51'd16384;
parameter    ap_ST_fsm_state16 = 51'd32768;
parameter    ap_ST_fsm_state17 = 51'd65536;
parameter    ap_ST_fsm_state18 = 51'd131072;
parameter    ap_ST_fsm_state19 = 51'd262144;
parameter    ap_ST_fsm_state20 = 51'd524288;
parameter    ap_ST_fsm_state21 = 51'd1048576;
parameter    ap_ST_fsm_state22 = 51'd2097152;
parameter    ap_ST_fsm_state23 = 51'd4194304;
parameter    ap_ST_fsm_state24 = 51'd8388608;
parameter    ap_ST_fsm_state25 = 51'd16777216;
parameter    ap_ST_fsm_state26 = 51'd33554432;
parameter    ap_ST_fsm_state27 = 51'd67108864;
parameter    ap_ST_fsm_state28 = 51'd134217728;
parameter    ap_ST_fsm_state29 = 51'd268435456;
parameter    ap_ST_fsm_state30 = 51'd536870912;
parameter    ap_ST_fsm_state31 = 51'd1073741824;
parameter    ap_ST_fsm_state32 = 51'd2147483648;
parameter    ap_ST_fsm_state33 = 51'd4294967296;
parameter    ap_ST_fsm_state34 = 51'd8589934592;
parameter    ap_ST_fsm_state35 = 51'd17179869184;
parameter    ap_ST_fsm_state36 = 51'd34359738368;
parameter    ap_ST_fsm_state37 = 51'd68719476736;
parameter    ap_ST_fsm_state38 = 51'd137438953472;
parameter    ap_ST_fsm_state39 = 51'd274877906944;
parameter    ap_ST_fsm_state40 = 51'd549755813888;
parameter    ap_ST_fsm_state41 = 51'd1099511627776;
parameter    ap_ST_fsm_state42 = 51'd2199023255552;
parameter    ap_ST_fsm_state43 = 51'd4398046511104;
parameter    ap_ST_fsm_state44 = 51'd8796093022208;
parameter    ap_ST_fsm_state45 = 51'd17592186044416;
parameter    ap_ST_fsm_state46 = 51'd35184372088832;
parameter    ap_ST_fsm_state47 = 51'd70368744177664;
parameter    ap_ST_fsm_state48 = 51'd140737488355328;
parameter    ap_ST_fsm_state49 = 51'd281474976710656;
parameter    ap_ST_fsm_state50 = 51'd562949953421312;
parameter    ap_ST_fsm_state51 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] x_address0;
output   x_ce0;
output   x_we0;
output  [31:0] x_d0;
input  [31:0] x_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] x_address0;
reg x_ce0;
reg x_we0;
reg[31:0] x_d0;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_168;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_142_p2;
reg   [31:0] reg_176;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state29;
wire   [2:0] i_4_fu_193_p2;
reg   [2:0] i_4_reg_348;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_187_p2;
reg   [31:0] xmax_2_reg_358;
wire    ap_CS_fsm_state4;
wire   [31:0] xmax_1_fu_282_p3;
wire    ap_CS_fsm_state5;
wire   [2:0] i_5_fu_300_p2;
reg   [2:0] i_5_reg_373;
wire    ap_CS_fsm_state6;
reg   [11:0] x_addr_2_reg_378;
wire   [0:0] exitcond2_fu_294_p2;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] tmp_6_reg_383;
wire    ap_CS_fsm_state21;
wire   [2:0] i_6_fu_317_p2;
reg   [2:0] i_6_reg_391;
wire    ap_CS_fsm_state23;
wire   [0:0] exitcond1_fu_311_p2;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] sum_1_reg_401;
wire    ap_CS_fsm_state44;
wire   [2:0] i_7_fu_334_p2;
reg   [2:0] i_7_reg_409;
wire    ap_CS_fsm_state45;
reg   [11:0] x_addr_4_reg_414;
wire   [0:0] exitcond_fu_328_p2;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] tmp_s_reg_419;
wire    ap_CS_fsm_state50;
reg   [2:0] i_reg_76;
reg   [31:0] xmax1_reg_87;
reg   [2:0] i_1_reg_97;
wire    ap_CS_fsm_state22;
reg   [2:0] i_2_reg_108;
reg   [31:0] sum_reg_119;
reg   [2:0] i_3_reg_131;
wire    ap_CS_fsm_state51;
wire   [63:0] i_cast4_fu_182_p1;
wire   [63:0] i_1_cast3_fu_289_p1;
wire   [63:0] i_2_cast2_fu_306_p1;
wire   [63:0] i_3_cast1_fu_323_p1;
reg   [31:0] grp_fu_142_p0;
reg   [31:0] grp_fu_142_p1;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state13;
wire   [31:0] xmax_2_to_int_fu_199_p1;
wire   [31:0] xmax1_to_int_fu_216_p1;
wire   [7:0] tmp_fu_202_p4;
wire   [22:0] tmp_3_fu_212_p1;
wire   [0:0] notrhs_fu_240_p2;
wire   [0:0] notlhs_fu_234_p2;
wire   [7:0] tmp_2_fu_220_p4;
wire   [22:0] tmp_11_fu_230_p1;
wire   [0:0] notrhs6_fu_258_p2;
wire   [0:0] notlhs5_fu_252_p2;
wire   [0:0] tmp_4_fu_246_p2;
wire   [0:0] tmp_7_fu_264_p2;
wire   [0:0] tmp_8_fu_270_p2;
wire   [0:0] tmp_9_fu_158_p2;
wire   [0:0] tmp_1_fu_276_p2;
reg   [1:0] grp_fu_142_opcode;
reg   [50:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
end

check_best_model_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_mb6_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p0),
    .din1(grp_fu_142_p1),
    .opcode(grp_fu_142_opcode),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

check_best_model_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_dEe_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_168),
    .din1(sum_1_reg_401),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

check_best_model_ncg #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_ncg_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(sum_reg_119),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

check_best_model_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
check_best_model_lbW_U57(
    .din0(xmax_2_reg_358),
    .din1(xmax1_reg_87),
    .opcode(5'd2),
    .dout(tmp_9_fu_158_p2)
);

check_best_model_ocq #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_ocq_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_176),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_187_p2 == 1'd1))) begin
        i_1_reg_97 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_1_reg_97 <= i_5_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_294_p2 == 1'd1))) begin
        i_2_reg_108 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        i_2_reg_108 <= i_6_reg_391;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        i_3_reg_131 <= i_7_reg_409;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        i_3_reg_131 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_76 <= i_4_reg_348;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_76 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_294_p2 == 1'd1))) begin
        sum_reg_119 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        sum_reg_119 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        xmax1_reg_87 <= xmax_1_fu_282_p3;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        xmax1_reg_87 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_4_reg_348 <= i_4_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_5_reg_373 <= i_5_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_6_reg_391 <= i_6_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        i_7_reg_409 <= i_7_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_168 <= x_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12))) begin
        reg_176 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        sum_1_reg_401 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_6_reg_383 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_s_reg_419 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_294_p2 == 1'd0))) begin
        x_addr_2_reg_378[2 : 0] <= i_1_cast3_fu_289_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (exitcond_fu_328_p2 == 1'd0))) begin
        x_addr_4_reg_414[2 : 0] <= i_3_cast1_fu_323_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        xmax_2_reg_358 <= x_q0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state45) & (exitcond_fu_328_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (exitcond_fu_328_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_142_opcode = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_142_opcode = 2'd0;
    end else begin
        grp_fu_142_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_142_p0 = sum_reg_119;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_142_p0 = reg_168;
    end else begin
        grp_fu_142_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_142_p1 = reg_168;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_142_p1 = xmax1_reg_87;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        x_address0 = x_addr_4_reg_414;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        x_address0 = i_3_cast1_fu_323_p1;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        x_address0 = i_2_cast2_fu_306_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_address0 = x_addr_2_reg_378;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        x_address0 = i_1_cast3_fu_289_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = i_cast4_fu_182_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = 64'd0;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        x_d0 = tmp_s_reg_419;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        x_d0 = tmp_6_reg_383;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state22))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_187_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond2_fu_294_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (exitcond1_fu_311_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (exitcond_fu_328_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_311_p2 = ((i_2_reg_108 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond2_fu_294_p2 = ((i_1_reg_97 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond3_fu_187_p2 = ((i_reg_76 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_fu_328_p2 = ((i_3_reg_131 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_cast3_fu_289_p1 = i_1_reg_97;

assign i_2_cast2_fu_306_p1 = i_2_reg_108;

assign i_3_cast1_fu_323_p1 = i_3_reg_131;

assign i_4_fu_193_p2 = (i_reg_76 + 3'd1);

assign i_5_fu_300_p2 = (i_1_reg_97 + 3'd1);

assign i_6_fu_317_p2 = (i_2_reg_108 + 3'd1);

assign i_7_fu_334_p2 = (i_3_reg_131 + 3'd1);

assign i_cast4_fu_182_p1 = i_reg_76;

assign notlhs5_fu_252_p2 = ((tmp_2_fu_220_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_234_p2 = ((tmp_fu_202_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs6_fu_258_p2 = ((tmp_11_fu_230_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_240_p2 = ((tmp_3_fu_212_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_11_fu_230_p1 = xmax1_to_int_fu_216_p1[22:0];

assign tmp_1_fu_276_p2 = (tmp_9_fu_158_p2 & tmp_8_fu_270_p2);

assign tmp_2_fu_220_p4 = {{xmax1_to_int_fu_216_p1[30:23]}};

assign tmp_3_fu_212_p1 = xmax_2_to_int_fu_199_p1[22:0];

assign tmp_4_fu_246_p2 = (notrhs_fu_240_p2 | notlhs_fu_234_p2);

assign tmp_7_fu_264_p2 = (notrhs6_fu_258_p2 | notlhs5_fu_252_p2);

assign tmp_8_fu_270_p2 = (tmp_7_fu_264_p2 & tmp_4_fu_246_p2);

assign tmp_fu_202_p4 = {{xmax_2_to_int_fu_199_p1[30:23]}};

assign xmax1_to_int_fu_216_p1 = xmax1_reg_87;

assign xmax_1_fu_282_p3 = ((tmp_1_fu_276_p2[0:0] === 1'b1) ? xmax_2_reg_358 : xmax1_reg_87);

assign xmax_2_to_int_fu_199_p1 = xmax_2_reg_358;

always @ (posedge ap_clk) begin
    x_addr_2_reg_378[11:3] <= 9'b000000000;
    x_addr_4_reg_414[11:3] <= 9'b000000000;
end

endmodule //k2c_softmax_func
