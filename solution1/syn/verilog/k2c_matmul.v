// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        A_address1,
        A_ce1,
        A_q1,
        B_offset,
        outrows,
        innerdim
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [10:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [10:0] A_address1;
output   A_ce1;
input  [31:0] A_q1;
input  [63:0] B_offset;
input  [63:0] outrows;
input  [63:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg A_ce1;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] row_1_fu_165_p2;
reg   [63:0] row_1_reg_349;
wire    ap_CS_fsm_state2;
wire   [12:0] tmp_fu_175_p3;
reg   [12:0] tmp_reg_354;
wire   [0:0] exitcond4_fu_160_p2;
wire  signed [11:0] tmp_15_fu_183_p1;
reg  signed [11:0] tmp_15_reg_359;
wire   [11:0] tmp_16_fu_186_p1;
reg   [11:0] tmp_16_reg_364;
wire   [6:0] col_1_fu_199_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] i_9_fu_224_p2;
reg   [63:0] i_9_reg_380;
wire    ap_CS_fsm_state4;
wire   [12:0] outrowidx_fu_234_p3;
reg   [12:0] outrowidx_reg_385;
wire   [0:0] exitcond2_fu_219_p2;
wire  signed [11:0] inneridx_fu_324_p2;
reg  signed [11:0] inneridx_reg_390;
wire   [63:0] k_1_fu_251_p2;
reg   [63:0] k_1_reg_398;
wire    ap_CS_fsm_state5;
reg   [10:0] B_addr_reg_403;
wire   [0:0] exitcond1_fu_246_p2;
wire   [11:0] tmp1_fu_279_p2;
reg   [11:0] tmp1_reg_408;
wire   [6:0] j_1_fu_298_p2;
reg   [6:0] j_1_reg_416;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_292_p2;
reg   [11:0] C_addr_1_reg_426;
reg   [31:0] B_load_1_reg_431;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_436;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] tmp_4_reg_441;
wire    ap_CS_fsm_state11;
reg   [31:0] C_load_reg_446;
wire   [31:0] grp_fu_152_p2;
reg   [31:0] tmp_6_reg_451;
wire    ap_CS_fsm_state16;
reg   [63:0] row_reg_97;
wire   [0:0] exitcond3_fu_193_p2;
reg   [6:0] col_reg_108;
reg   [63:0] i_reg_119;
reg   [63:0] k_reg_130;
reg   [6:0] j_reg_141;
wire    ap_CS_fsm_state17;
wire   [63:0] sum_cast_fu_210_p1;
wire   [63:0] sum1_cast_fu_262_p1;
wire   [63:0] sum4_cast_fu_309_p1;
wire   [63:0] sum2_cast_fu_319_p1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state8;
wire   [6:0] tmp_17_fu_171_p1;
wire   [12:0] col_cast5_fu_189_p1;
wire   [12:0] sum_fu_205_p2;
wire   [6:0] tmp_19_fu_230_p1;
wire   [11:0] tmp_20_fu_242_p1;
(* use_dsp48 = "no" *) wire   [11:0] sum1_fu_257_p2;
wire   [5:0] tmp_21_fu_267_p1;
wire   [11:0] tmp_2_fu_271_p3;
wire   [11:0] j_cast2_fu_288_p1;
wire   [11:0] sum4_fu_304_p2;
wire   [12:0] j_cast3_fu_284_p1;
wire   [12:0] sum2_fu_314_p2;
wire  signed [11:0] inneridx_fu_324_p1;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

check_best_model_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(C_load_reg_446),
    .din1(tmp_4_reg_441),
    .ce(1'b1),
    .dout(grp_fu_152_p2)
);

check_best_model_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(B_load_1_reg_431),
    .din1(B_load_reg_436),
    .ce(1'b1),
    .dout(grp_fu_156_p2)
);

check_best_model_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
check_best_model_eOg_U8(
    .din0(tmp_15_reg_359),
    .din1(inneridx_fu_324_p1),
    .dout(inneridx_fu_324_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_reg_108 <= 7'd0;
    end else if (((exitcond3_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_108 <= col_1_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_reg_119 <= i_9_reg_380;
    end else if (((exitcond4_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_119 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_141 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        j_reg_141 <= j_1_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        k_reg_130 <= k_1_reg_398;
    end else if (((exitcond2_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_reg_130 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_reg_97 <= row_1_reg_349;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_97 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        B_addr_reg_403 <= sum1_cast_fu_262_p1;
        tmp1_reg_408 <= tmp1_fu_279_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        B_load_1_reg_431 <= A_q0;
        B_load_reg_436 <= A_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        C_addr_1_reg_426 <= sum2_cast_fu_319_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_load_reg_446 <= C_q0;
        tmp_4_reg_441 <= grp_fu_156_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_9_reg_380 <= i_9_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_219_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        inneridx_reg_390 <= inneridx_fu_324_p2;
        outrowidx_reg_385[12 : 6] <= outrowidx_fu_234_p3[12 : 6];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_1_reg_416 <= j_1_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_1_reg_398 <= k_1_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_1_reg_349 <= row_1_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_15_reg_359 <= tmp_15_fu_183_p1;
        tmp_16_reg_364 <= tmp_16_fu_186_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_6_reg_451 <= grp_fu_152_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_354[12 : 6] <= tmp_fu_175_p3[12 : 6];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce1 = 1'b1;
    end else begin
        A_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        C_address0 = C_addr_1_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = sum_cast_fu_210_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        C_d0 = tmp_6_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((exitcond3_fu_193_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond2_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond2_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_193_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_219_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond1_fu_246_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((exitcond_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = B_addr_reg_403;

assign A_address1 = sum4_cast_fu_309_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign col_1_fu_199_p2 = (col_reg_108 + 7'd1);

assign col_cast5_fu_189_p1 = col_reg_108;

assign exitcond1_fu_246_p2 = ((k_reg_130 == innerdim) ? 1'b1 : 1'b0);

assign exitcond2_fu_219_p2 = ((i_reg_119 == outrows) ? 1'b1 : 1'b0);

assign exitcond3_fu_193_p2 = ((col_reg_108 == 7'd64) ? 1'b1 : 1'b0);

assign exitcond4_fu_160_p2 = ((row_reg_97 == outrows) ? 1'b1 : 1'b0);

assign exitcond_fu_292_p2 = ((j_reg_141 == 7'd64) ? 1'b1 : 1'b0);

assign i_9_fu_224_p2 = (64'd1 + i_reg_119);

assign inneridx_fu_324_p1 = i_reg_119[11:0];

assign j_1_fu_298_p2 = (j_reg_141 + 7'd1);

assign j_cast2_fu_288_p1 = j_reg_141;

assign j_cast3_fu_284_p1 = j_reg_141;

assign k_1_fu_251_p2 = (64'd1 + k_reg_130);

assign outrowidx_fu_234_p3 = {{tmp_19_fu_230_p1}, {6'd0}};

assign row_1_fu_165_p2 = (row_reg_97 + 64'd1);

assign sum1_cast_fu_262_p1 = sum1_fu_257_p2;

assign sum1_fu_257_p2 = ($signed(inneridx_reg_390) + $signed(tmp_20_fu_242_p1));

assign sum2_cast_fu_319_p1 = sum2_fu_314_p2;

assign sum2_fu_314_p2 = (j_cast3_fu_284_p1 + outrowidx_reg_385);

assign sum4_cast_fu_309_p1 = sum4_fu_304_p2;

assign sum4_fu_304_p2 = (tmp1_reg_408 + j_cast2_fu_288_p1);

assign sum_cast_fu_210_p1 = sum_fu_205_p2;

assign sum_fu_205_p2 = (col_cast5_fu_189_p1 + tmp_reg_354);

assign tmp1_fu_279_p2 = (tmp_16_reg_364 + tmp_2_fu_271_p3);

assign tmp_15_fu_183_p1 = innerdim[11:0];

assign tmp_16_fu_186_p1 = B_offset[11:0];

assign tmp_17_fu_171_p1 = row_reg_97[6:0];

assign tmp_19_fu_230_p1 = i_reg_119[6:0];

assign tmp_20_fu_242_p1 = k_reg_130[11:0];

assign tmp_21_fu_267_p1 = k_reg_130[5:0];

assign tmp_2_fu_271_p3 = {{tmp_21_fu_267_p1}, {6'd0}};

assign tmp_fu_175_p3 = {{tmp_17_fu_171_p1}, {6'd0}};

always @ (posedge ap_clk) begin
    tmp_reg_354[5:0] <= 6'b000000;
    outrowidx_reg_385[5:0] <= 6'b000000;
end

endmodule //k2c_matmul
