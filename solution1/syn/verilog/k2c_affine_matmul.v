// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k2c_affine_matmul (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        C_address0,
        C_ce0,
        C_we0,
        C_d0,
        C_q0,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        d_address0,
        d_ce0,
        d_q0,
        outrows,
        outcols,
        innerdim
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_state4 = 24'd8;
parameter    ap_ST_fsm_state5 = 24'd16;
parameter    ap_ST_fsm_state6 = 24'd32;
parameter    ap_ST_fsm_state7 = 24'd64;
parameter    ap_ST_fsm_state8 = 24'd128;
parameter    ap_ST_fsm_state9 = 24'd256;
parameter    ap_ST_fsm_state10 = 24'd512;
parameter    ap_ST_fsm_state11 = 24'd1024;
parameter    ap_ST_fsm_state12 = 24'd2048;
parameter    ap_ST_fsm_state13 = 24'd4096;
parameter    ap_ST_fsm_state14 = 24'd8192;
parameter    ap_ST_fsm_state15 = 24'd16384;
parameter    ap_ST_fsm_state16 = 24'd32768;
parameter    ap_ST_fsm_state17 = 24'd65536;
parameter    ap_ST_fsm_state18 = 24'd131072;
parameter    ap_ST_fsm_state19 = 24'd262144;
parameter    ap_ST_fsm_state20 = 24'd524288;
parameter    ap_ST_fsm_state21 = 24'd1048576;
parameter    ap_ST_fsm_state22 = 24'd2097152;
parameter    ap_ST_fsm_state23 = 24'd4194304;
parameter    ap_ST_fsm_state24 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;
input  [31:0] C_q0;
output  [11:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [11:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [11:0] d_address0;
output   d_ce0;
input  [31:0] d_q0;
input  [63:0] outrows;
input  [7:0] outcols;
input  [7:0] innerdim;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] C_address0;
reg C_ce0;
reg C_we0;
reg[31:0] C_d0;
reg A_ce0;
reg B_ce0;
reg d_ce0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_190;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_182_p2;
reg   [31:0] reg_195;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
wire   [12:0] outcols_cast8_fu_200_p1;
reg   [12:0] outcols_cast8_reg_384;
wire   [63:0] row_2_fu_213_p2;
reg   [63:0] row_2_reg_393;
wire    ap_CS_fsm_state2;
wire  signed [12:0] tmp_fu_350_p2;
reg  signed [12:0] tmp_reg_398;
wire   [0:0] exitcond4_fu_208_p2;
wire   [12:0] innerdim_cast_fu_219_p1;
reg   [12:0] innerdim_cast_reg_403;
wire   [11:0] tmp_4_fu_222_p1;
reg   [11:0] tmp_4_reg_408;
wire   [6:0] col_2_fu_238_p2;
wire    ap_CS_fsm_state3;
wire   [63:0] i_19_fu_263_p2;
reg   [63:0] i_19_reg_424;
wire    ap_CS_fsm_state4;
wire  signed [12:0] outrowidx_fu_355_p2;
reg  signed [12:0] outrowidx_reg_429;
wire   [0:0] exitcond2_fu_258_p2;
wire  signed [12:0] inneridx_fu_360_p2;
reg  signed [12:0] inneridx_reg_434;
wire   [11:0] j_cast4_fu_269_p1;
reg   [11:0] j_cast4_reg_439;
wire    ap_CS_fsm_state5;
wire   [63:0] j_cast2_fu_277_p1;
reg   [63:0] j_cast2_reg_444;
wire   [6:0] j_7_fu_290_p2;
reg   [6:0] j_7_reg_452;
reg   [11:0] C_addr_2_reg_457;
wire   [0:0] exitcond1_fu_285_p2;
wire   [6:0] k_2_fu_319_p2;
reg   [6:0] k_2_reg_465;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_314_p2;
wire   [11:0] next_mul_fu_335_p2;
reg   [11:0] next_mul_reg_475;
reg   [31:0] A_load_reg_490;
wire    ap_CS_fsm_state7;
reg   [31:0] B_load_reg_495;
wire   [31:0] grp_fu_186_p2;
reg   [31:0] tmp_5_reg_500;
reg   [31:0] d_load_reg_505;
reg   [63:0] row_reg_116;
wire   [0:0] exitcond3_fu_233_p2;
reg   [6:0] col_reg_127;
reg   [63:0] i_reg_138;
reg   [6:0] j_reg_149;
wire    ap_CS_fsm_state24;
reg   [6:0] k_reg_160;
wire    ap_CS_fsm_state17;
reg   [11:0] phi_mul_reg_171;
wire   [63:0] sum_cast_fu_249_p1;
wire   [63:0] sum2_cast_fu_301_p1;
wire   [63:0] sum5_cast_fu_330_p1;
wire   [63:0] sum8_cast_fu_345_p1;
wire    ap_CS_fsm_state10;
reg   [31:0] grp_fu_182_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state8;
wire   [7:0] col_cast_fu_229_p1;
wire   [12:0] col_cast5_fu_225_p1;
(* use_dsp48 = "no" *) wire   [12:0] sum_fu_244_p2;
wire   [7:0] j_cast_fu_281_p1;
wire   [12:0] j_cast3_fu_273_p1;
(* use_dsp48 = "no" *) wire   [12:0] sum2_fu_296_p2;
wire   [7:0] k_cast_fu_310_p1;
wire   [12:0] k_cast1_fu_306_p1;
(* use_dsp48 = "no" *) wire   [12:0] sum5_fu_325_p2;
wire   [11:0] sum8_fu_340_p2;
wire   [7:0] tmp_fu_350_p0;
wire  signed [12:0] tmp_fu_350_p1;
wire   [7:0] outrowidx_fu_355_p0;
wire  signed [12:0] tmp_29_fu_254_p1;
wire   [7:0] inneridx_fu_360_p0;
reg   [23:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
end

check_best_model_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_cud_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_190),
    .din1(grp_fu_182_p1),
    .ce(1'b1),
    .dout(grp_fu_182_p2)
);

check_best_model_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
check_best_model_dEe_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(A_load_reg_490),
    .din1(B_load_reg_495),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

check_best_model_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
check_best_model_kbM_U39(
    .din0(tmp_fu_350_p0),
    .din1(tmp_fu_350_p1),
    .dout(tmp_fu_350_p2)
);

check_best_model_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
check_best_model_kbM_U40(
    .din0(outrowidx_fu_355_p0),
    .din1(tmp_29_fu_254_p1),
    .dout(outrowidx_fu_355_p2)
);

check_best_model_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 13 ))
check_best_model_kbM_U41(
    .din0(inneridx_fu_360_p0),
    .din1(tmp_29_fu_254_p1),
    .dout(inneridx_fu_360_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd0))) begin
        col_reg_127 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_233_p2 == 1'd0))) begin
        col_reg_127 <= col_2_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_285_p2 == 1'd1))) begin
        i_reg_138 <= i_19_reg_424;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1))) begin
        i_reg_138 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_reg_149 <= j_7_reg_452;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_258_p2 == 1'd0))) begin
        j_reg_149 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_285_p2 == 1'd0))) begin
        k_reg_160 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        k_reg_160 <= k_2_reg_465;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_285_p2 == 1'd0))) begin
        phi_mul_reg_171 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        phi_mul_reg_171 <= next_mul_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_233_p2 == 1'd1))) begin
        row_reg_116 <= row_2_reg_393;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        row_reg_116 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        A_load_reg_490 <= A_q0;
        B_load_reg_495 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_285_p2 == 1'd0))) begin
        C_addr_2_reg_457 <= sum2_cast_fu_301_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        d_load_reg_505 <= d_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_19_reg_424 <= i_19_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1))) begin
        innerdim_cast_reg_403[7 : 0] <= innerdim_cast_fu_219_p1[7 : 0];
        tmp_4_reg_408[7 : 0] <= tmp_4_fu_222_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_258_p2 == 1'd0))) begin
        inneridx_reg_434 <= inneridx_fu_360_p2;
        outrowidx_reg_429 <= outrowidx_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_7_reg_452 <= j_7_fu_290_p2;
        j_cast2_reg_444[6 : 0] <= j_cast2_fu_277_p1[6 : 0];
        j_cast4_reg_439[6 : 0] <= j_cast4_fu_269_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        k_2_reg_465 <= k_2_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_314_p2 == 1'd0))) begin
        next_mul_reg_475 <= next_mul_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        outcols_cast8_reg_384[7 : 0] <= outcols_cast8_fu_200_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        reg_190 <= C_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16))) begin
        reg_195 <= grp_fu_182_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_2_reg_393 <= row_2_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_5_reg_500 <= grp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd0))) begin
        tmp_reg_398 <= tmp_fu_350_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6))) begin
        C_address0 = C_addr_2_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = sum_cast_fu_249_p1;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state24))) begin
        C_d0 = reg_195;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = 32'd0;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state24) | ((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_233_p2 == 1'd0)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_258_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_258_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        d_ce0 = 1'b1;
    end else begin
        d_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_182_p1 = d_load_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_182_p1 = tmp_5_reg_500;
    end else begin
        grp_fu_182_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond4_fu_208_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond3_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond2_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_314_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sum5_cast_fu_330_p1;

assign B_address0 = sum8_cast_fu_345_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign col_2_fu_238_p2 = (col_reg_127 + 7'd1);

assign col_cast5_fu_225_p1 = col_reg_127;

assign col_cast_fu_229_p1 = col_reg_127;

assign d_address0 = j_cast2_reg_444;

assign exitcond1_fu_285_p2 = ((j_cast_fu_281_p1 == outcols) ? 1'b1 : 1'b0);

assign exitcond2_fu_258_p2 = ((i_reg_138 == outrows) ? 1'b1 : 1'b0);

assign exitcond3_fu_233_p2 = ((col_cast_fu_229_p1 == outcols) ? 1'b1 : 1'b0);

assign exitcond4_fu_208_p2 = ((row_reg_116 == outrows) ? 1'b1 : 1'b0);

assign exitcond_fu_314_p2 = ((k_cast_fu_310_p1 == innerdim) ? 1'b1 : 1'b0);

assign i_19_fu_263_p2 = (64'd1 + i_reg_138);

assign innerdim_cast_fu_219_p1 = innerdim;

assign inneridx_fu_360_p0 = innerdim_cast_reg_403;

assign j_7_fu_290_p2 = (j_reg_149 + 7'd1);

assign j_cast2_fu_277_p1 = j_reg_149;

assign j_cast3_fu_273_p1 = j_reg_149;

assign j_cast4_fu_269_p1 = j_reg_149;

assign j_cast_fu_281_p1 = j_reg_149;

assign k_2_fu_319_p2 = (k_reg_160 + 7'd1);

assign k_cast1_fu_306_p1 = k_reg_160;

assign k_cast_fu_310_p1 = k_reg_160;

assign next_mul_fu_335_p2 = (phi_mul_reg_171 + tmp_4_reg_408);

assign outcols_cast8_fu_200_p1 = outcols;

assign outrowidx_fu_355_p0 = outcols_cast8_reg_384;

assign row_2_fu_213_p2 = (64'd1 + row_reg_116);

assign sum2_cast_fu_301_p1 = sum2_fu_296_p2;

assign sum2_fu_296_p2 = ($signed(j_cast3_fu_273_p1) + $signed(outrowidx_reg_429));

assign sum5_cast_fu_330_p1 = sum5_fu_325_p2;

assign sum5_fu_325_p2 = ($signed(inneridx_reg_434) + $signed(k_cast1_fu_306_p1));

assign sum8_cast_fu_345_p1 = sum8_fu_340_p2;

assign sum8_fu_340_p2 = (j_cast4_reg_439 + phi_mul_reg_171);

assign sum_cast_fu_249_p1 = sum_fu_244_p2;

assign sum_fu_244_p2 = ($signed(col_cast5_fu_225_p1) + $signed(tmp_reg_398));

assign tmp_29_fu_254_p1 = i_reg_138[12:0];

assign tmp_4_fu_222_p1 = outcols;

assign tmp_fu_350_p0 = outcols_cast8_reg_384;

assign tmp_fu_350_p1 = row_reg_116[12:0];

always @ (posedge ap_clk) begin
    outcols_cast8_reg_384[12:8] <= 5'b00000;
    innerdim_cast_reg_403[12:8] <= 5'b00000;
    tmp_4_reg_408[11:8] <= 4'b0000;
    j_cast4_reg_439[11:7] <= 5'b00000;
    j_cast2_reg_444[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //k2c_affine_matmul
